heat_template_version: 2013-05-23


description: >
  This demo will create 1 web server and 1 db server under a load balancer.


parameters:
  key_name:
    type: string
    default: ""
    description : Name of a KeyPair to enable SSH access to the instance
  instance_type:
    type: string
    description: Instance type
    default: m1.small
    constraints:
      - allowed_values: [m1.small, m1.medium, m1.large]
        description: instance_type must be one of m1.small, m1.medium or m1.large
  image_id:
    type: string
    default: ""
    description: ID of the image to use for the WordPress server
  volume_size:
    type: number
    description: Size of the volume to be created.
    default: 10
    constraints:
      - range: { min: 1, max: 1024 }
        description: must be between 1 and 1024 GB.
  floating_network_id:
    type: string
    default: ""
    description: ex-net ID
  availability_zone:
    type: string
    default: ""
    description: availability zone
  db_root_password:
    type: string
    description: Root password for MySQL
    default: collapsar
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_username must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_password must contain only alphanumeric characters
  dns_nameserver:
    type: string
    default: ""
    description: DNS server IP address


resources:
#web server 1
  web_server1:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      availability_zone: { get_param: availability_zone }
      block_device_mapping_v2:
        - device_name: /dev/vda
          volume_id: { get_resource: webserver1_volume }
          delete_on_termination: false
      networks:
        - port: { get_resource: webserver1_port1 }
        - port: { get_resource: webserver1_port2 }
      user_data: |
            #!/bin/bash -v
            cat << EOS > /etc/network/interfaces
            auto lo eth0 eth1
            iface lo inet loopback
            iface eth0 inet dhcp
            iface eth1 inet dhcp
            EOS
            ifdown eth0
            ifup eth0
            ifdown eth1
            ifup eth1
            apt-get -y update
            apt-get -y install apache2
            echo "hello heat web server (ubuntu) !" > /var/www/html/index.html
  webserver1_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
  webserver1_port1:
    type: OS::Neutron::Port
    properties:
        network_id: { get_resource: private_net01 }
        fixed_ips:
          - subnet_id: { get_resource: private_subnet01 }
        security_groups:
          - { get_resource: securitygroups }
  webserver1_port2:
    type: OS::Neutron::Port
    properties:
        network_id: { get_resource: private_net02 }
        fixed_ips:
          - subnet_id: { get_resource: private_subnet02 }
        security_groups:
          - { get_resource: securitygroups }

#DB server
  db_server:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      availability_zone:  { get_param: availability_zone }
      block_device_mapping_v2:
        - device_name: /dev/vda
          volume_id: { get_resource: dbserver1_volume }
      networks:
        - port: { get_resource: dbserver1_port1 }
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            apt-get -y update
            echo mysql-server mysql-server/root_password select db_rootpassword | debconf-set-selections
            echo mysql-server mysql-server/root_password_again select db_rootpassword | debconf-set-selections
            apt-get -y install mysql-server
            db_ip=`curl -s <<DB address>>`
            sed -i "s|^\(bind-address.*=\s\).*$|\1${db_ip}|" /etc/mysql/my.cnf
            service mysql restart
            EXIT
            EOF
          params:
            db_rootpassword: { get_param: db_root_password }
  dbserver1_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
  dbserver1_port1:
    type: OS::Neutron::Port
    properties:
        network_id: { get_resource: private_net01 }
        fixed_ips:
          - subnet_id: { get_resource: private_subnet01 }
        security_groups:
          - { get_resource: securitygroups }

#load balancer
  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: HTTP
      delay: 10
      max_retries: 5
      timeout: 5
  pool01:
    type: OS::Neutron::Pool
    properties:
      name: mypool01
      protocol: HTTP
      subnet_id: { get_resource: private_subnet02 }
      lb_method: ROUND_ROBIN
      monitors: [ { get_resource: monitor } ]
      vip: {"address": 172.22.0.77, "protocol_port": 80}
  loadbalancer01:
    type: OS::Neutron::LoadBalancer
    properties:
      members: [ { get_resource: web_server1 } ]
      pool_id: { get_resource: pool01 }
      protocol_port: 80
  lb_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: floating_network_id }
      port_id: { "Fn::Select" : [ "port_id", { get_attr: [ pool01 , vip ] } ] }

#network 1
  private_net01:
    type: OS::Neutron::Net
    properties:
      name: heat-nw01
  private_subnet01:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net01 }
      cidr: 172.21.0.0/24
      dns_nameservers:
        - { get_param: dns_nameserver }
      gateway_ip: 172.21.0.1

#network 2
  private_net02:
    type: OS::Neutron::Net
    properties:
      name: heat-nw02
  private_subnet02:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net02 }
      cidr: 172.22.0.0/24
      dns_nameservers:
        - { get_param: dns_nameserver }
      gateway_ip: 172.22.0.1

#router 1
  router01:
    type: OS::Neutron::Router
  router_gateway01:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: router01 }
      network_id: { get_param: floating_network_id }
  router_interface01:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router01 }
      subnet_id: { get_resource: private_subnet01 }

#router 2
  router02:
    type: OS::Neutron::Router
  router_gateway02:
    type: OS::Neutron::RouterGateway
    properties:
      router_id: { get_resource: router02 }
      network_id: { get_param: floating_network_id }
  router_interface02:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router02 }
      subnet_id: { get_resource: private_subnet02 }

#security groups
  securitygroups:
    type: AWS::EC2::SecurityGroup
    properties:
      GroupDescription: 'Enable HTTP access via port 80 plus SSH access'
      SecurityGroupIngress:
      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '1'
        ToPort: '65535'
        CidrIp: 172.21.0.0/24
      - IpProtocol: tcp
        FromPort: '1'
        ToPort: '65535'
        CidrIp: 172.22.0.0/24


outputs:
  WebsiteURL:
    description: URL
    value:
      str_replace:
        template: http://host
        params:
          host: { get_attr: [lb_floating_ip, floating_ip_address] }